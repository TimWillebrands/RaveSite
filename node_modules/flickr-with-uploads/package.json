{
  "name": "flickr-with-uploads",
  "description": "Flickr API with OAuth 1.0A and uploads",
  "version": "2.0.4",
  "keywords": [
    "flickr",
    "api",
    "oauth",
    "upload",
    "backup",
    "archive",
    "sync"
  ],
  "homepage": "https://github.com/chbrown/flickr-with-uploads",
  "repository": {
    "type": "git",
    "url": "git://github.com/chbrown/flickr-with-uploads.git"
  },
  "bugs": {
    "url": "https://github.com/chbrown/flickr-with-uploads/issues",
    "email": "Christopher Brown <io@henrian.com>"
  },
  "author": {
    "name": "Christopher Brown",
    "email": "io@henrian.com",
    "url": "http://henrian.com"
  },
  "bin": {
    "flickr": "bin/flickr.js"
  },
  "contributors": [
    {
      "name": "Sujal Shah",
      "email": "codesujal@gmail.com"
    },
    {
      "name": "Thomas",
      "url": "https://github.com/tomap"
    },
    {
      "name": "Tomasz Kołodziejski",
      "url": "https://github.com/neojski"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "async": "*",
    "form-data": "*",
    "lodash": "*",
    "loge": "*",
    "oauth": "*",
    "optimist": "*",
    "streaming": "*",
    "xml2js": "*"
  },
  "readme": "# Flickr API + uploads\n\nMy use-case project, [flickr-sync](https://github.com/chbrown/flickr-sync), was recently merged into this project.\nThis brought on a few additional dependencies, but no API changes. All library calls to [flickr-with-uploads](https://github.com/chbrown/flickr-with-uploads) and flickr-sync are the same as before, but both are implemented in flickr-with-uploads. The flickr-sync CLI has also been merged over into this package.\n\n\n## Installation\n\nIf you have already installed `flickr-sync` globally, do a quick cleanup: `npm uninstall -g flickr-sync`\n\nOr if it's too late for that, the important bit is getting rid of `flickr-sync`'s ownership of the `flickr` script on your `PATH`, so `rm $(which flickr)` will do the trick.\n\n**With `npm`:**\n\n```bash\nnpm install -g flickr-with-uploads\n```\n\nOr require the library from your `package.json`:\n\n```json\n{\n  ...\n  \"dependencies\" : {\n    \"flickr-with-uploads\": \"*\",\n    ...\n  }\n}\n```\n\n## Usage\n\nFirst we want to prepare a closure preloaded with our credentials, which we'll call `api`:\n\n```javascript\nvar flickr = require('flickr-with-uploads');\nvar api = flickr(\n  '0RjUImXvsYx2P8Gi4eZScFh9fkLJltDV', // consumer_key\n  'mbu87dOB0FWncTRJ', // consumer_secret\n  '3XF0pqP4daZf9oIlx-a7H1uMLeGrBidkJU', // oauth_token\n  'KpslBxHoh4QYk6ad'); // oauth_token_secret\n```\n\nI keep these in a JSON file at `~/.flickr`, which is what [flickr-sync](https://github.com/chbrown/flickr-sync), so if you plan on using that, this is probably the way to go.\n\n```json\n{\n  \"consumer_key\": \"0RjUImXvsYx2P8Gi4eZScFh9fkLJltDV\",\n  \"consumer_secret\": \"mbu87dOB0FWncTRJ\",\n  \"oauth_token\": \"3XF0pqP4daZf9oIlx-a7H1uMLeGrBidkJU\",\n  \"oauth_token_secret\": \"KpslBxHoh4QYk6ad\"\n}\n```\n\n(All my values are fake, obviously---actual Flickr credentials are all hexadecimal.)\n\n## Examples\n\nUsing the `api` function from above, let's upload a file.\n\n```javascript\nvar fullpath = '/Users/chbrown/Pictures/Seaworld - The Heist/orca_019.jpg';\n// the upload method is special, but this library automatically handles the\n// hostname change\napi({\n  method: 'upload',\n  title: 'My new pet: baby orca',\n  description: \"Don't tell Seaworld!\",\n  is_public: 0,\n  is_friend: 1,\n  is_family: 1,\n  hidden: 2,\n  photo: fs.createReadStream(fullpath)\n}, function(err, response) {\n  if (err) {\n    console.error('Could not upload photo:', err);\n  }\n  else {\n    var new_photo_id = response.photoid._content;\n    // usually, the method name is precisely the name of the API method, as they are here:\n    api({method: 'flickr.photos.getInfo', photo_id: new_photo_id}, function(err, response) {\n      console.log('Full photo info:', response);\n      api({method: 'flickr.photosets.addPhoto', photoset_id: 1272356126, photo_id: new_photo_id}, function(err, response) {\n        console.log('Added photo to photoset:', response);\n      });\n    });\n  }\n});\n```\n\n## Related\n\nThis library was (re)written to support my [flickr-sync](https://github.com/chbrown/flickr-sync) project, which is a script to backup a directory of directories full of pictures as sets of photos to Flickr. Since Pro accounts have unlimited storage on Flickr, and they allow totally private photos, it's a great archival service.\n\nSee [flickr-sync](https://github.com/chbrown/flickr-sync) for many more examples of using this library (it has been updated to use the ~1.0 version).\n\n\n### Flickr API Examples\n\nHere are some sample responses that the Flickr API will send back for a couple of API methods (usually the responses are much longer, I'm abbreviating here to the interesting stuff (for example, you'll always get a `{ stat: 'ok' }` value for successful queries, but I don't include that here):\n\n#### flickr.photosets.getList\n\n    {\n      photosets: {\n        photoset: [\n          { id: '72147630888316081', primary: '7500858540', secret: '3bedf92dec', server: '8214', farm: 9,\n            photos: 3, videos: '0', title: { _content: '20120716 Iceland - Reykjavik' },\n            description: { _content: 'flickr-store' }, needs_interstitial: 0, visibility_can_see_set: 1,\n            count_views: '0', count_comments: '0', can_comment: 1,\n            date_create: '1344024608', date_update: '1344024918' },\n          ...\n        ]\n      }\n    }\n\n#### flickr.photos.search\n\n    {\n      photos: {\n        photo: [\n          { id: '7500858540', owner: '33947520@N00', secret: 'f38df12d5c',\n            server: '8014', farm: 9, title: 'flickr-store',\n            ispublic: 0, isfriend: 0, isfamily: 0 }\n        ],\n        ...\n      }\n    }\n\n#### flickr.test.login\n\n    {\n      user: { id: '33947520@N00', username: { _content: 'audiere' } },\n      stat: 'ok'\n    }\n\n## Development\n\nFixes are totally welcome! In the master branch, even! Just use sane formatting (like what [jsbeautifier.org](http://jsbeautifier.org/) uses, but with 2-space indents, not 4).\n\nExcepting any hashbang, the following should head all `*.js` files:\n\n    /*jslint node: true */\n\n### Dependencies\n\n* `form-data`, to assemble urls for OAuth signing\n* [`oauth`](https://github.com/chbrown/node-oauth.git), to add OAuth url signatures\n\nI've sent a pull request to ciaranj's `node-oauth`, for some required functionality to allow signing but not GET/POSTing with that OAuth library. For the time being, this package requires my fork, which includes that functionality.\n\n      // var wrapped_api = function(opts, callback) {\n      //   logger.info('Flickr API request: %s', opts);\n      //   api(opts, function(err, response_object) {\n      //     logger.info(response_object, 'Flickr API response');\n      //     callback(err, response_object);\n      //   });\n      // };\n\n\n## References\n\nhttps://www.flickr.com/services/api/misc.urls.html\n\n## License\n\nCopyright © 2012–2014 Christopher Brown. [MIT Licensed](LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "flickr-with-uploads@2.0.4",
  "_from": "flickr-with-uploads@*"
}
